import tkinter as tk
from tkinter import messagebox
import random

class TicTacToe:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Крестики-нолики")
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        self.current_player = "X"
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        self.ai_enabled = tk.BooleanVar(value=False)
        self.create_widgets()
        self.window.mainloop()

    def create_widgets(self):
        # Создание кнопок игрового поля
        for row in range(3):
            for col in range(3):
                btn = tk.Button(
                    self.window, text=" ", font=("Arial", 24), width=5, height=2,
                    command=lambda r=row, c=col: self.make_move(r, c)
                )
                btn.grid(row=row, column=col)
                self.buttons[row][col] = btn

        # Добавить выбор режима игры
        tk.Label(self.window, text="Режим:").grid(row=3, column=0, columnspan=3)
        tk.Checkbutton(
            self.window, text="Игра против ИИ", variable=self.ai_enabled
        ).grid(row=4, column=0, columnspan=3)

        # Кнопка перезапуска игры
        tk.Button(
            self.window, text="Начать заново", command=self.reset_game
        ).grid(row=5, column=0, columnspan=3)

    def make_move(self, row, col):
        if self.board[row][col] == " " and self.current_player == "X":
            self.board[row][col] = self.current_player
            self.buttons[row][col].config(text=self.current_player)
            if self.check_winner(self.current_player):
                messagebox.showinfo("Игра окончена", f"Игрок {self.current_player} победил!")
                self.reset_game()
                return
            elif self.is_draw():
                messagebox.showinfo("Игра окончена", "Ничья!")
                self.reset_game()
                return
            self.current_player = "O"
            if self.ai_enabled.get():
                self.ai_move()

    def ai_move(self):
        row, col = self.best_move()
        self.board[row][col] = "O"
        self.buttons[row][col].config(text="O")
        if self.check_winner("O"):
            messagebox.showinfo("Игра окончена", "ИИ победил!")
            self.reset_game()
            return
        elif self.is_draw():
            messagebox.showinfo("Игра окончена", "Ничья!")
            self.reset_game()
            return
        self.current_player = "X"

    def is_draw(self):
        return all(cell != " " for row in self.board for cell in row)

    def check_winner(self, player):
        # Проверка строк, столбцов и диагоналей
        for row in self.board:
            if all(cell == player for cell in row):
                return True
        for col in range(3):
            if all(row[col] == player for row in self.board):
                return True
        if all(self.board[i][i] == player for i in range(3)) or \
           all(self.board[i][2 - i] == player for i in range(3)):
            return True
        return False

    def best_move(self):
        # Минимакс: выбор лучшего хода для ИИ
        best_score = float("-inf")
        move = (0, 0)
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == " ":
                    self.board[row][col] = "O"
                    score = self.minimax(0, False)
                    self.board[row][col] = " "
                    if score > best_score:
                        best_score = score
                        move = (row, col)
        return move

    def minimax(self, depth, is_maximizing):
        if self.check_winner("O"):
            return 1
        if self.check_winner("X"):
            return -1
        if self.is_draw():
            return 0

        if is_maximizing:
            best_score = float("-inf")
            for row in range(3):
                for col in range(3):
                    if self.board[row][col] == " ":
                        self.board[row][col] = "O"
                        score = self.minimax(depth + 1, False)
                        self.board[row][col] = " "
                        best_score = max(best_score, score)
            return best_score
        else:
            best_score = float("inf")
            for row in range(3):
                for col in range(3):
                    if self.board[row][col] == " ":
                        self.board[row][col] = "X"
                        score = self.minimax(depth + 1, True)
                        self.board[row][col] = " "
                        best_score = min(best_score, score)
            return best_score

    def reset_game(self):
        # Сброс игрового поля
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        self.current_player = "X"
        for row in range(3):
            for col in range(3):
                self.buttons[row][col].config(text=" ")

# Запуск игры
if __name__ == "__main__":
    TicTacToe()
